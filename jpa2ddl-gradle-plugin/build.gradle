plugins {
	id 'groovy'
	id 'java-gradle-plugin'
	id 'java-library'
	id 'maven-publish'
}

/* 
if (JavaVersion.current() != project.targetCompatibility) {
    throw new GradleException("The java version used ${JavaVersion.current()} is not the expected version ${project.targetCompatibility}.")
}

print "Java home: ${System.getenv('org.gradle.java.home')}\n"

*/

repositories {
	mavenLocal()
	mavenCentral()
}

group = 'com.devskiller.jpa2ddl'
project.version = findProperty('jpa2ddlVersion') ?: '1.0.0-SNAPSHOT'

sourceCompatibility = 11
targetCompatibility = 11

// gpaglia

gradlePlugin {
    plugins {
        jpa2ddl {
            id = 'com.devskiller.jpa2ddl'
            implementationClass = 'com.devskiller.jpa2ddl.GeneratePlugin'
        }
    }
}

compileJava {
	options.compilerArgs += ['-Xlint:deprecation']
}

// end gpaglia

dependencies {
	implementation gradleApi()
	implementation localGroovy()
	api "com.devskiller.jpa2ddl:jpa2ddl-core:${findProperty('jpa2ddlVersion') ?: '+'}"
	api "com.h2database:h2:1.4.199"
	testImplementation gradleTestKit()
	testImplementation 'junit:junit:4.12'
	testImplementation 'org.assertj:assertj-core:3.12.2'
}

task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier = 'javadoc'
	from javadoc.destinationDir
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
	archiveClassifier = 'groovydoc'
	from groovydoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
	archives groovydocJar
}

publishing {
    repositories {
        mavenLocal()
    }

	publications {
        pluginPublication (MavenPublication) {
            from    components.java
            groupId    project.group
            artifactId    'com.devskiller.jpa2ddl.gradle.plugin'
            version    project.version
        }
    }
}
